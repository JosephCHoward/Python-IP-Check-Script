## Problem Description

An important element of information security is checking the reputation of IP addresses connected to by systems in a network. Services such as VirusTotal and AbuseIPDB collect and provide data related to the reputation of IP addresses. Security analysts make use of these services to check whether specific IP addresses are known to be malicious or engaged in suspicious activity. This assists security analysts and engineers with reducing or eliminating false positives and detecting, preventing, and responding to threats. 
Checking IP reputations takes time, and if security analysts or engineers work in an environment with high traffic volume and a high number of alerts, manually checking the reputation of all IP addresses included in alerts can easily be overwhelming or impossible. Using automation to check IP address reputations and return important data can save time and help reduce the burden of processing high numbers of IP addresses and alerts.  

## Solution Overview and Major Features

As a solution to this problem, this project automates the checking of IP addresses against AbuseIPDB, a well-known internet repository for reporting and identifying IP addresses that have been associated with malicious activity (AbuseIPDB, n.d.-a). AbuseIPDB provides access to its services via an application programming interface (API) (AbuseIPDB, n.d.-b). An API is a set of rules or protocols by which software applications can communicate directly with one another to exchange data, features, or functionality (Goodwin, 2024). 
At a broad level, the project includes the following elements:
1.	Network Traffic Capture
The script captures network traffic on a specified network interface (eth0) for a set duration (30 seconds). The purpose of the capture is to gather network data for the IP reputation check. The script saves the network capture in a pcap file (packet_capture.pcap). Pcap, which stands for packet capture, is a file that contains data packets captured on a computer network (Hjelmvik, 2022).
2.	IP Address Extraction from PCAP File
The script extracts IP addresses from the pcap file and appends them to an existing file (ip_addresses.txt) which already contains 10 IP addresses with negative reputations according to AbuseIPDB. The file is prepopulated with suspicious addresses in order to avoid connecting to potentially malicious sites while also providing a means for including suspicious sites in the final results. The script analyzes the pcap file, identifies unique, public IP addresses, and appends them to ip_addresses.txt. Identifying unique IP addresses prevents duplicate entries in the ip_addresses.txt file to avoid redundant checks against AbuseIPDB.
3.	IP Reputation Checking
The script then selects the first 20 IP addresses from the ip_addresses.txt file for checking against AbuseIPDB. Only 20 were selected to avoid exceeding the AbuseIPDB limit during testing and to reduce the time required for the AbuseIPDB query (so that the screen record video of the script run would not be excessively large). In addition to reading the first 20 IP addresses from ip_addresses.txt, the script also reads the AbuseIPDB API key from the file jh_abuseipdb_key.txt. The key is read from a separate file to avoid hard coding the key into the script, which would be an insecure method. 
4.	Formatting and Ranking Results
The AbuseIPDB API call returns data in JSON format. JSON, which stands for JavaScript Object Notation, is based on a subset of the JavaScript language and is a lightweight data-interchange format which is relatively easy for humans to read and write and for machines to parse and generate (JSON.org, n.d.). For the sake of brevity and in order to provide the most relevant or interesting data, the script selects 8 categories of data to be included in the results for each IP address. This data is reformatted to be more easily human-readable. Results are ordered based on the AbuseIPDB confidence score with the most suspicious IP addresses first and the remaining results following in descending order. This allows an analyst to quickly identify the most suspicious IP addresses. 
5.	Results Output
The script writes the results to a file (abuseipdb_reports.txt) and also prints the results to the screen. Writing to a file provides persistent storage for later retrieval while printing to the screen provides immediate viewing if desired. 
6.	Periodic Print Statements
The script includes a number of print statements which inform the user about the progress of the script such as the beginning and ending of packet capture, processing of the pcap file, appending IP addresses to the existing file, checking IP addresses against AbuseIPDB, and printing the sorted results to the screen. 
7.	Error Handling
The script includes error handling elements such as the following:
a.	Error during packet capture: catches exceptions that occur during the packet capture process and prints an error message before exiting the script.
b.	Error reading existing IP addresses: catches “FileNotFoundError” and other exceptions when reading the existing IP addresses from the file, printing an error message before exiting the script.
c.	Error extracting IP addresses: catches exceptions during the extraction and appending of IP addresses from the capture file to the output file, printing an error message before exiting the script.
d.	Error reading IP addresses from file: catches exceptions when reading IP addresses from the file, printing an error message before exiting the script.
e.	Network error while checking IP addresses against AbuseIPDB: catches “requests.exceptions.RequestException” during the API call to AbuseIPDB, printing a network error message before exiting the script.
f.	Error saving results to file: catches exceptions when saving results to the output file, printing an error message before exiting the script.
g.	Error reading API key from file: catches exceptions when reading the API key from the file, printing an error message before exiting the script.

# Modules Used

